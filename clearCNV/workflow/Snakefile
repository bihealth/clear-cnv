import os.path
import pathlib

workdir: config["workdir"]

# -----------------------------------------------------------------------------
#  USER INPUT FILES

PANEL       = config["panelname"]
BED         = config["bedfile"] # "beds/%s.bed"%PANEL
BAMSTXT     = config["bamsfile"] # "bams/%s_bams.txt"%PANEL
REF         = config["reference"] # "/fast/work/projects/cubit/18.12/static_data/reference/GRCh37/hs37d5/hs37d5.fa"
KMER_ALIGN  = config["kmer_align"] # "/fast/work/projects/cubit/18.12/static_data/db/goldenpath/variable/GRCh37/wgEncodeCrgMapabilityAlign100mer.eq_1.bed"

#COMMON_CNVS = "common_cnvs/GRCh37_hg19_variants_2020-02-25.txt"

# -----------------------------------------------------------------------------
# =============================================================================
# -----------------------------------------------------------------------------
#  DO NOT TOUCH


# folder          = pathlib.Path(PANEL)
# BED_MERGED      = folder \ pathlib.Path("merged.bed")
# COV_DIR         = folder \ pathlib.Path("cov")
# RESULTS_DIR     = folder \ pathlib.Path("results")
# ANALYSIS_DIR    = folder \ pathlib.Path("analysis")
# COVERAGES       = COV_DIR \ pathlib.Path("coverages.tsv")
# MATCHSCORES     = RESULTS_DIR \ pathlib.Path("matchscores.tsv")
# RESULTS_DIR     = folder \ pathlib.Path("results")
# CNV_CALLS       = RESULTS_DIR \ pathlib.Path("cnv_calls.tsv")
# RATIO_SCORES    = RESULTS_DIR \ pathlib.Path("rscores.tsv")
# Z_SCORES        = RESULTS_DIR \ pathlib.Path("zscores.tsv")
# ANNOT           = RESULTS_DIR \ pathlib.Path("annotations.bed")


folder          = "%s/"%PANEL
BED_MERGED      = "%smerged.bed"%folder
COV_DIR         = "%scov/"%folder
RESULTS_DIR     = "%sresults"%folder
ANALYSIS_DIR    = "%sanalysis/"%folder
COVERAGES       = "%scoverages.tsv"%COV_DIR
MATCHSCORES     = "%smatchscores.tsv"%RESULTS_DIR
RESULTS_DIR     = "%sresults/"%folder
CNV_CALLS       = "%scnv_calls.tsv"%RESULTS_DIR
RATIO_SCORES    = "%srscores.tsv"%RESULTS_DIR
Z_SCORES        = "%szscores.tsv"%RESULTS_DIR
ANNOT           = "%sannotations.bed"%RESULTS_DIR

#COMMON_CNV_CALLS  = "%scnv_calls.tsv.common"%RESULTS_DIR

# =============================================================================
#  UTIL
# =============================================================================

with open(BAMSTXT, "rt") as inputf:
  paths = [p.strip() for p in inputf.readlines()]
  BAMS = {
    os.path.basename(p).split(".")[1]: p
    for p in paths
  }

# -----------------------------------------------------------------------------

rule all:
    input:
        COVERAGES,
        MATCHSCORES,
        BED_MERGED,
        ANNOT,
        CNV_CALLS,
        ANALYSIS_DIR+'ratio_scores_extended_0.html'

# =============================================================================
#  MERGE BED
# =============================================================================

rule merge_bed:
    params:
        BED
    output:
        BED_MERGED
    log: folder+"logs/merge_bed.log"
    shell:
        "clearCNV merge_bed\
            -i {params} \
            -o {output}"

# =============================================================================
#  ANNOTATIONS (GC content & mappability)
# =============================================================================

rule annotations:
    input:
        BED_MERGED
    output:
        ANNOT
    params:
        REF,
        KMER_ALIGN
    log: folder+"logs/annotations.log"
    shell:
        "clearCNV annotations \
            -r {params[0]} \
            -b {input} \
            -k {params[1]} \
            -a {output}"


# =============================================================================
#  COVERAGES
# =============================================================================

rule count_pairs:
    input:
        lambda wildcards: BAMS[wildcards.bam],
        BED_MERGED
    output:
        COV_DIR+"{bam}.rtbed"
    log: folder+"logs/coverages/{bam}.log"
    shell:
        "clearCNV coverage \
            -i {input[0]} \
            -b {input[1]} \
            -r {output}"

# -----------------------------------------------------------------------------

rule merge_rtbeds:
    input:
        rtbeds=expand(COV_DIR+"{bam}.rtbed",bam=BAMS.keys())
    output:
        COVERAGES
    params:
        exome=BED_MERGED
    log: folder+"logs/merge_coverages.log"
    shell:
        "clearCNV merge_coverages \
            -b {params} \
            -r {input} \
            -c {output}"

# =============================================================================
#  MATCH SCORES
# =============================================================================

rule matchscores:
    input:
        COVERAGES
    output:
        MATCHSCORES
    params:
        PANEL,
        "0.02"
    threads: 64
    log: folder+"logs/matchscores.log"
    shell:
        "clearCNV matchscores \
            -p {params[0]} \
            -c {input} \
            -m {output} \
            -x {params[1]} \
            --cores {threads}"

# =============================================================================
#  CNV CALLING
# =============================================================================

rule cnv_calling:
    input:
        COVERAGES,
        MATCHSCORES
    output:
        calls=CNV_CALLS,
        rscores=RATIO_SCORES,
        zscores=Z_SCORES,
        _=ANALYSIS_DIR+"ANALYSIS_group_sizes_cutoff.pdf"
    params:
        panel=PANEL,
        anadir=ANALYSIS_DIR,
        cnvs=CNV_CALLS,
        artefacts="0.02"
    threads: 64
    log: folder+"logs/cnvcalls.log"
    shell:
        "clearCNV cnv_calling \
            -p {params.panel} \
            -c {input[0]} \
            -a {params.anadir} \
            -m {input[1]} \
            -C {output.calls} \
            -r {output.rscores} \
            -z {output.zscores} \
            -x {params.artefacts} \
            -g 20 \
            --cores {threads}"

# =============================================================================
#  VISUALIZE RESULTS
# =============================================================================

rule visualize_results:
    input:
        zscores=Z_SCORES,
        rscores=RATIO_SCORES,
        annot=ANNOT
    output:
        ANALYSIS_DIR+'ratio_scores_extended_0.html'
    params:
        ANALYSIS_DIR
    shell:
         "clearCNV visualize \
            -a {params} \
            -r {input.rscores} \
            -z {input.zscores} \
            -n {input.annot} \
            -s 2000"

# =============================================================================
#  FIND COMMON CNV CALLS
# =============================================================================

# rule common_cnv_calls:
#     input:
#         RESULTS_DIR+"cnv_calls.tsv"
#     output:
#         COMMON_CNV_CALLS
#     params:
#         COMMON_CNVS
#     shell:
#         "bash scripts/common_cnv_calls.sh {input} {params} {output}"
